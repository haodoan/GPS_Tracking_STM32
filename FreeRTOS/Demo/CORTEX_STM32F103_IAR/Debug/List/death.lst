###############################################################################
#
# IAR ANSI C/C++ Compiler V7.40.5.9725/W32 for ARM        20/Jan/2016  11:11:54
# Copyright 1999-2015 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\Common\Minimal\death.c
#    Command line =  
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\Common\Minimal\death.c
#        -D VECT_TAB_FLASH -D IAR_ARM_CM3 -lcN
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List
#        --diag_suppress Pa082,pe191 -o
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Install Program\IAR
#        Systems\Embedded Workbench 7.2\arm\INC\c\DLib_Config_Full.h" -I
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\.\
#        -I
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\STM32F10xFWLib\inc\
#        -I
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\..\Source\include\
#        -I
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\..\common\include\
#        -Ol --use_c++_inline --require_prototypes
#    List file    =  
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\List\death.lst
#    Object file  =  
#        D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\CORTEX_STM32F103_IAR\Debug\Obj\death.o
#
###############################################################################

D:\Setup\FreeRTOS\FreeRTOSV8.2.3\FreeRTOS\Demo\Common\Minimal\death.c
      1          /*
      2              FreeRTOS V8.2.3 - Copyright (C) 2015 Real Time Engineers Ltd.
      3              All rights reserved
      4          
      5              VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
      6          
      7              This file is part of the FreeRTOS distribution.
      8          
      9              FreeRTOS is free software; you can redistribute it and/or modify it under
     10              the terms of the GNU General Public License (version 2) as published by the
     11              Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
     12          
     13              ***************************************************************************
     14              >>!   NOTE: The modification to the GPL is included to allow you to     !<<
     15              >>!   distribute a combined work that includes FreeRTOS without being   !<<
     16              >>!   obliged to provide the source code for proprietary components     !<<
     17              >>!   outside of the FreeRTOS kernel.                                   !<<
     18              ***************************************************************************
     19          
     20              FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
     21              WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
     22              FOR A PARTICULAR PURPOSE.  Full license text is available on the following
     23              link: http://www.freertos.org/a00114.html
     24          
     25              ***************************************************************************
     26               *                                                                       *
     27               *    FreeRTOS provides completely free yet professionally developed,    *
     28               *    robust, strictly quality controlled, supported, and cross          *
     29               *    platform software that is more than just the market leader, it     *
     30               *    is the industry's de facto standard.                               *
     31               *                                                                       *
     32               *    Help yourself get started quickly while simultaneously helping     *
     33               *    to support the FreeRTOS project by purchasing a FreeRTOS           *
     34               *    tutorial book, reference manual, or both:                          *
     35               *    http://www.FreeRTOS.org/Documentation                              *
     36               *                                                                       *
     37              ***************************************************************************
     38          
     39              http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
     40              the FAQ page "My application does not run, what could be wrong?".  Have you
     41              defined configASSERT()?
     42          
     43              http://www.FreeRTOS.org/support - In return for receiving this top quality
     44              embedded software for free we request you assist our global community by
     45              participating in the support forum.
     46          
     47              http://www.FreeRTOS.org/training - Investing in training allows your team to
     48              be as productive as possible as early as possible.  Now you can receive
     49              FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
     50              Ltd, and the world's leading authority on the world's leading RTOS.
     51          
     52              http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
     53              including FreeRTOS+Trace - an indispensable productivity tool, a DOS
     54              compatible FAT file system, and our tiny thread aware UDP/IP stack.
     55          
     56              http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
     57              Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
     58          
     59              http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
     60              Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
     61              licenses offer ticketed support, indemnification and commercial middleware.
     62          
     63              http://www.SafeRTOS.com - High Integrity Systems also provide a safety
     64              engineered and independently SIL3 certified version for use in safety and
     65              mission critical applications that require provable dependability.
     66          
     67              1 tab == 4 spaces!
     68          */
     69          
     70          /**
     71           * Create a single persistent task which periodically dynamically creates another
     72           * two tasks.  The original task is called the creator task, the two tasks it
     73           * creates are called suicidal tasks.
     74           *
     75           * One of the created suicidal tasks kill one other suicidal task before killing
     76           * itself - leaving just the original task remaining.
     77           *
     78           * The creator task must be spawned after all of the other demo application tasks
     79           * as it keeps a check on the number of tasks under the scheduler control.  The
     80           * number of tasks it expects to see running should never be greater than the
     81           * number of tasks that were in existence when the creator task was spawned, plus
     82           * one set of four suicidal tasks.  If this number is exceeded an error is flagged.
     83           *
     84           * \page DeathC death.c
     85           * \ingroup DemoFiles
     86           * <HR>
     87           */
     88          
     89          
     90          #include <stdlib.h>
     91          
     92          /* Scheduler include files. */
     93          #include "FreeRTOS.h"
     94          #include "task.h"
     95          
     96          /* Demo program include files. */
     97          #include "death.h"
     98          
     99          #define deathSTACK_SIZE		( configMINIMAL_STACK_SIZE + 60 )
    100          
    101          /* The task originally created which is responsible for periodically dynamically
    102          creating another four tasks. */
    103          static portTASK_FUNCTION_PROTO( vCreateTasks, pvParameters );
    104          
    105          /* The task function of the dynamically created tasks. */
    106          static portTASK_FUNCTION_PROTO( vSuicidalTask, pvParameters );
    107          
    108          /* A variable which is incremented every time the dynamic tasks are created.  This
    109          is used to check that the task is still running. */
    110          static volatile uint16_t usCreationCount = 0;
    111          
    112          /* Used to store the number of tasks that were originally running so the creator
    113          task can tell if any of the suicidal tasks have failed to die.
    114          */
    115          static volatile UBaseType_t uxTasksRunningAtStart = 0;
    116          
    117          /* Tasks are deleted by the idle task.  Under heavy load the idle task might
    118          not get much processing time, so it would be legitimate for several tasks to
    119          remain undeleted for a short period. */
    120          static const UBaseType_t uxMaxNumberOfExtraTasksRunning = 3;
    121          
    122          /* Used to store a handle to the task that should be killed by a suicidal task,
    123          before it kills itself. */
    124          TaskHandle_t xCreatedTask;
    125          
    126          /*-----------------------------------------------------------*/
    127          
    128          void vCreateSuicidalTasks( UBaseType_t uxPriority )
    129          {
    130          UBaseType_t *puxPriority;
    131          
    132          	/* Create the Creator tasks - passing in as a parameter the priority at which
    133          	the suicidal tasks should be created. */
    134          	puxPriority = ( UBaseType_t * ) pvPortMalloc( sizeof( UBaseType_t ) );
    135          	*puxPriority = uxPriority;
    136          
    137          	xTaskCreate( vCreateTasks, "CREATOR", deathSTACK_SIZE, ( void * ) puxPriority, uxPriority, NULL );
    138          
    139          	/* Record the number of tasks that are running now so we know if any of the
    140          	suicidal tasks have failed to be killed. */
    141          	uxTasksRunningAtStart = ( UBaseType_t ) uxTaskGetNumberOfTasks();
    142          	
    143          	/* FreeRTOS.org versions before V3.0 started the idle-task as the very
    144          	first task. The idle task was then already included in uxTasksRunningAtStart.
    145          	From FreeRTOS V3.0 on, the idle task is started when the scheduler is
    146          	started. Therefore the idle task is not yet accounted for. We correct
    147          	this by increasing uxTasksRunningAtStart by 1. */
    148          	uxTasksRunningAtStart++;
    149          	
    150          	/* From FreeRTOS version 7.0.0 can optionally create a timer service task.  
    151          	If this is done, then uxTasksRunningAtStart needs incrementing again as that
    152          	too is created when the scheduler is started. */
    153          	#if configUSE_TIMERS == 1
    154          		uxTasksRunningAtStart++;
    155          	#endif
    156          }
    157          /*-----------------------------------------------------------*/
    158          					
    159          static portTASK_FUNCTION( vSuicidalTask, pvParameters )
    160          {
    161          volatile long l1, l2;
    162          TaskHandle_t xTaskToKill;
    163          const TickType_t xDelay = ( TickType_t ) 200 / portTICK_PERIOD_MS;
    164          
    165          	if( pvParameters != NULL )
    166          	{
    167          		/* This task is periodically created four times.  Two created tasks are
    168          		passed a handle to the other task so it can kill it before killing itself.
    169          		The other task is passed in null. */
    170          		xTaskToKill = *( TaskHandle_t* )pvParameters;
    171          	}
    172          	else
    173          	{
    174          		xTaskToKill = NULL;
    175          	}
    176          
    177          	for( ;; )
    178          	{
    179          		/* Do something random just to use some stack and registers. */
    180          		l1 = 2;
    181          		l2 = 89;
    182          		l2 *= l1;
    183          		vTaskDelay( xDelay );
    184          
    185          		if( xTaskToKill != NULL )
    186          		{
    187          			/* Make sure the other task has a go before we delete it. */
    188          			vTaskDelay( ( TickType_t ) 0 );
    189          
    190          			/* Kill the other task that was created by vCreateTasks(). */
    191          			vTaskDelete( xTaskToKill );
    192          
    193          			/* Kill ourselves. */
    194          			vTaskDelete( NULL );
    195          		}
    196          	}
    197          }/*lint !e818 !e550 Function prototype must be as per standard for task functions. */
    198          /*-----------------------------------------------------------*/
    199          
    200          static portTASK_FUNCTION( vCreateTasks, pvParameters )
    201          {
    202          const TickType_t xDelay = ( TickType_t ) 1000 / portTICK_PERIOD_MS;
    203          UBaseType_t uxPriority;
    204          
    205          	uxPriority = *( UBaseType_t * ) pvParameters;
    206          	vPortFree( pvParameters );
    207          
    208          	for( ;; )
    209          	{
    210          		/* Just loop round, delaying then creating the four suicidal tasks. */
    211          		vTaskDelay( xDelay );
    212          
    213          		xCreatedTask = NULL;
    214          
    215          		xTaskCreate( vSuicidalTask, "SUICID1", configMINIMAL_STACK_SIZE, NULL, uxPriority, &xCreatedTask );
    216          		xTaskCreate( vSuicidalTask, "SUICID2", configMINIMAL_STACK_SIZE, &xCreatedTask, uxPriority, NULL );
    217          
    218          		++usCreationCount;
    219          	}
    220          }
    221          /*-----------------------------------------------------------*/
    222          
    223          /* This is called to check that the creator task is still running and that there
    224          are not any more than four extra tasks. */
    225          BaseType_t xIsCreateTaskStillRunning( void )
    226          {
    227          static uint16_t usLastCreationCount = 0xfff;
    228          BaseType_t xReturn = pdTRUE;
    229          static UBaseType_t uxTasksRunningNow;
    230          
    231          	if( usLastCreationCount == usCreationCount )
    232          	{
    233          		xReturn = pdFALSE;
    234          	}
    235          	else
    236          	{
    237          		usLastCreationCount = usCreationCount;
    238          	}
    239          	
    240          	uxTasksRunningNow = ( UBaseType_t ) uxTaskGetNumberOfTasks();
    241          
    242          	if( uxTasksRunningNow < uxTasksRunningAtStart )
    243          	{
    244          		xReturn = pdFALSE;
    245          	}
    246          	else if( ( uxTasksRunningNow - uxTasksRunningAtStart ) > uxMaxNumberOfExtraTasksRunning )
    247          	{
    248          		xReturn = pdFALSE;
    249          	}
    250          	else
    251          	{
    252          		/* Everything is okay. */
    253          	}
    254          
    255          	return xReturn;
    256          }
    257          
    258          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   vCreateSuicidalTasks
        24   -> pvPortMalloc
        24   -> uxTaskGetNumberOfTasks
        24   -> xTaskGenericCreate
      32   vCreateTasks
        32   -> vPortFree
        32   -> vTaskDelay
        32   -> xTaskGenericCreate
      24   vSuicidalTask
        24   -> vTaskDelay
        24   -> vTaskDelete
       8   xIsCreateTaskStillRunning
         8   -> uxTaskGetNumberOfTasks


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
       8  ?_0
       8  ?_1
       8  ?_2
       2  usCreationCount
       2  usLastCreationCount
       4  uxMaxNumberOfExtraTasksRunning
       4  uxTasksRunningAtStart
       4  uxTasksRunningNow
      60  vCreateSuicidalTasks
      90  vCreateTasks
      64  vSuicidalTask
       4  xCreatedTask
      76  xIsCreateTaskStillRunning

 
  14 bytes in section .bss
   2 bytes in section .data
  28 bytes in section .rodata
 330 bytes in section .text
 
 330 bytes of CODE  memory
  28 bytes of CONST memory
  16 bytes of DATA  memory

Errors: none
Warnings: none
